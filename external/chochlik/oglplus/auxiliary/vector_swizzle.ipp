/**
 *  .file oglplus/auxiliary/vector_swizzle.ipp
 *  .brief Implementation of the Swizzled template
 *
 *  @author Matus Chochlik
 *
 *  Copyright 2010-2013 Matus Chochlik. Distributed under the Boost
 *  Software License, Version 1.0. (See accompanying file
 *  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 */

template <typename T, std::size_t N>
class Swizzled
 : public Vector<T, N>
{
public:
	Swizzled(Vector<T, N> v)
	 : Vector<T, N>(v)
	{ }

	T x(void) const
	{
		return this->template At<0>();
	}

	T y(void) const
	{
		return this->template At<1>();
	}

	T z(void) const
	{
		return this->template At<2>();
	}

	T w(void) const
	{
		return this->template At<3>();
	}

#define OGLPLUS_AUX_IMPLEMENT_VEC_SWIZZLE_2(C0, C1) \
	Vector<T, 2> C0 ## C1(void) const \
	{ \
		return Vector<T, 2>(C0(), C1()); \
	}

#define OGLPLUS_AUX_IMPLEMENT_VEC_SWIZZLE_3(C0, C1, C2) \
	Vector<T, 3> C0 ## C1 ## C2(void) const \
	{ \
		return Vector<T, 3>(C0(), C1(), C2()); \
	}

#define OGLPLUS_AUX_IMPLEMENT_VEC_SWIZZLE_4(C0, C1, C2, C3) \
	Vector<T, 3> C0 ## C1 ## C2 ## C3(void) const \
	{ \
		return Vector<T, 4>(C0(), C1(), C2(), C3); \
	}

	OGLPLUS_AUX_IMPLEMENT_VEC_SWIZZLE_2(x, x);
	OGLPLUS_AUX_IMPLEMENT_VEC_SWIZZLE_2(x, y);
	OGLPLUS_AUX_IMPLEMENT_VEC_SWIZZLE_2(x, z);
	OGLPLUS_AUX_IMPLEMENT_VEC_SWIZZLE_2(x, w);

	OGLPLUS_AUX_IMPLEMENT_VEC_SWIZZLE_2(y, x);
	OGLPLUS_AUX_IMPLEMENT_VEC_SWIZZLE_2(y, y);
	OGLPLUS_AUX_IMPLEMENT_VEC_SWIZZLE_2(y, z);
	OGLPLUS_AUX_IMPLEMENT_VEC_SWIZZLE_2(y, w);

	OGLPLUS_AUX_IMPLEMENT_VEC_SWIZZLE_2(z, x);
	OGLPLUS_AUX_IMPLEMENT_VEC_SWIZZLE_2(z, y);
	OGLPLUS_AUX_IMPLEMENT_VEC_SWIZZLE_2(z, z);
	OGLPLUS_AUX_IMPLEMENT_VEC_SWIZZLE_2(z, w);

	OGLPLUS_AUX_IMPLEMENT_VEC_SWIZZLE_2(w, x);
	OGLPLUS_AUX_IMPLEMENT_VEC_SWIZZLE_2(w, y);
	OGLPLUS_AUX_IMPLEMENT_VEC_SWIZZLE_2(w, z);
	OGLPLUS_AUX_IMPLEMENT_VEC_SWIZZLE_2(w, w);


	OGLPLUS_AUX_IMPLEMENT_VEC_SWIZZLE_3(x, x, x);
	OGLPLUS_AUX_IMPLEMENT_VEC_SWIZZLE_3(x, x, y);
	OGLPLUS_AUX_IMPLEMENT_VEC_SWIZZLE_3(x, x, z);
	OGLPLUS_AUX_IMPLEMENT_VEC_SWIZZLE_3(x, x, w);

	OGLPLUS_AUX_IMPLEMENT_VEC_SWIZZLE_3(x, y, x);
	OGLPLUS_AUX_IMPLEMENT_VEC_SWIZZLE_3(x, y, y);
	OGLPLUS_AUX_IMPLEMENT_VEC_SWIZZLE_3(x, y, z);
	OGLPLUS_AUX_IMPLEMENT_VEC_SWIZZLE_3(x, y, w);

	OGLPLUS_AUX_IMPLEMENT_VEC_SWIZZLE_3(x, z, x);
	OGLPLUS_AUX_IMPLEMENT_VEC_SWIZZLE_3(x, z, y);
	OGLPLUS_AUX_IMPLEMENT_VEC_SWIZZLE_3(x, z, z);
	OGLPLUS_AUX_IMPLEMENT_VEC_SWIZZLE_3(x, z, w);

	OGLPLUS_AUX_IMPLEMENT_VEC_SWIZZLE_3(x, w, x);
	OGLPLUS_AUX_IMPLEMENT_VEC_SWIZZLE_3(x, w, y);
	OGLPLUS_AUX_IMPLEMENT_VEC_SWIZZLE_3(x, w, z);
	OGLPLUS_AUX_IMPLEMENT_VEC_SWIZZLE_3(x, w, w);

	OGLPLUS_AUX_IMPLEMENT_VEC_SWIZZLE_3(y, x, x);
	OGLPLUS_AUX_IMPLEMENT_VEC_SWIZZLE_3(y, x, y);
	OGLPLUS_AUX_IMPLEMENT_VEC_SWIZZLE_3(y, x, z);
	OGLPLUS_AUX_IMPLEMENT_VEC_SWIZZLE_3(y, x, w);

	OGLPLUS_AUX_IMPLEMENT_VEC_SWIZZLE_3(y, y, x);
	OGLPLUS_AUX_IMPLEMENT_VEC_SWIZZLE_3(y, y, y);
	OGLPLUS_AUX_IMPLEMENT_VEC_SWIZZLE_3(y, y, z);
	OGLPLUS_AUX_IMPLEMENT_VEC_SWIZZLE_3(y, y, w);

	OGLPLUS_AUX_IMPLEMENT_VEC_SWIZZLE_3(y, z, x);
	OGLPLUS_AUX_IMPLEMENT_VEC_SWIZZLE_3(y, z, y);
	OGLPLUS_AUX_IMPLEMENT_VEC_SWIZZLE_3(y, z, z);
	OGLPLUS_AUX_IMPLEMENT_VEC_SWIZZLE_3(y, z, w);

	OGLPLUS_AUX_IMPLEMENT_VEC_SWIZZLE_3(y, w, x);
	OGLPLUS_AUX_IMPLEMENT_VEC_SWIZZLE_3(y, w, y);
	OGLPLUS_AUX_IMPLEMENT_VEC_SWIZZLE_3(y, w, z);
	OGLPLUS_AUX_IMPLEMENT_VEC_SWIZZLE_3(y, w, w);

	OGLPLUS_AUX_IMPLEMENT_VEC_SWIZZLE_3(z, x, x);
	OGLPLUS_AUX_IMPLEMENT_VEC_SWIZZLE_3(z, x, y);
	OGLPLUS_AUX_IMPLEMENT_VEC_SWIZZLE_3(z, x, z);
	OGLPLUS_AUX_IMPLEMENT_VEC_SWIZZLE_3(z, x, w);

	OGLPLUS_AUX_IMPLEMENT_VEC_SWIZZLE_3(z, y, x);
	OGLPLUS_AUX_IMPLEMENT_VEC_SWIZZLE_3(z, y, y);
	OGLPLUS_AUX_IMPLEMENT_VEC_SWIZZLE_3(z, y, z);
	OGLPLUS_AUX_IMPLEMENT_VEC_SWIZZLE_3(z, y, w);

	OGLPLUS_AUX_IMPLEMENT_VEC_SWIZZLE_3(z, z, x);
	OGLPLUS_AUX_IMPLEMENT_VEC_SWIZZLE_3(z, z, y);
	OGLPLUS_AUX_IMPLEMENT_VEC_SWIZZLE_3(z, z, z);
	OGLPLUS_AUX_IMPLEMENT_VEC_SWIZZLE_3(z, z, w);

	OGLPLUS_AUX_IMPLEMENT_VEC_SWIZZLE_3(z, w, x);
	OGLPLUS_AUX_IMPLEMENT_VEC_SWIZZLE_3(z, w, y);
	OGLPLUS_AUX_IMPLEMENT_VEC_SWIZZLE_3(z, w, z);
	OGLPLUS_AUX_IMPLEMENT_VEC_SWIZZLE_3(z, w, w);

	OGLPLUS_AUX_IMPLEMENT_VEC_SWIZZLE_3(w, x, x);
	OGLPLUS_AUX_IMPLEMENT_VEC_SWIZZLE_3(w, x, y);
	OGLPLUS_AUX_IMPLEMENT_VEC_SWIZZLE_3(w, x, z);
	OGLPLUS_AUX_IMPLEMENT_VEC_SWIZZLE_3(w, x, w);

	OGLPLUS_AUX_IMPLEMENT_VEC_SWIZZLE_3(w, y, x);
	OGLPLUS_AUX_IMPLEMENT_VEC_SWIZZLE_3(w, y, y);
	OGLPLUS_AUX_IMPLEMENT_VEC_SWIZZLE_3(w, y, z);
	OGLPLUS_AUX_IMPLEMENT_VEC_SWIZZLE_3(w, y, w);

	OGLPLUS_AUX_IMPLEMENT_VEC_SWIZZLE_3(w, z, x);
	OGLPLUS_AUX_IMPLEMENT_VEC_SWIZZLE_3(w, z, y);
	OGLPLUS_AUX_IMPLEMENT_VEC_SWIZZLE_3(w, z, z);
	OGLPLUS_AUX_IMPLEMENT_VEC_SWIZZLE_3(w, z, w);

	OGLPLUS_AUX_IMPLEMENT_VEC_SWIZZLE_3(w, w, x);
	OGLPLUS_AUX_IMPLEMENT_VEC_SWIZZLE_3(w, w, y);
	OGLPLUS_AUX_IMPLEMENT_VEC_SWIZZLE_3(w, w, z);
	OGLPLUS_AUX_IMPLEMENT_VEC_SWIZZLE_3(w, w, w);


#undef OGLPLUS_AUX_IMPLEMENT_VEC_SWIZZLE_4
#undef OGLPLUS_AUX_IMPLEMENT_VEC_SWIZZLE_3
#undef OGLPLUS_AUX_IMPLEMENT_VEC_SWIZZLE_2
};

template <typename T, std::size_t N>
inline Swizzled<T, N> Swizzle(Vector<T, N> v)
{
	return Swizzled<T, N>(v);
}


